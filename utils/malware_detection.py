from io import StringIO, BytesIO
import binascii
from time import perf_counter

import pandas as pd
import streamlit as st
import yara

#from utils.custom_logger import get_custom_logger


#logger = get_custom_logger('load_rules')

def png_to_io(file_path):
    # Open plaintext file with hex
    picture_hex = bytes.hex(file_path.getvalue())
    # Convert hex to binary data
    picture_bytes = binascii.unhexlify(picture_hex)
    # Convert bytes to stream (file-like object in memory)
    picture_stream = BytesIO(picture_bytes)
    return picture_stream

def compile_rule_category(rules_list):
    compiled_categories = {}
    for item in rules_list:
        rules = yara.load(f'compiled_{item}')
        compiled_categories[item] = rules
    return compiled_categories


def detect_malware(file_path, ext):
    # To convert to a string based IO:
    if 'png' in ext:
        stringio = png_to_io(file_path)
        st.image(stringio)
    else:
        stringio = StringIO(file_path.getvalue().decode("utf-8"))
    
    # To read file as string:
    string_data = stringio.read()
    start = perf_counter()
    # compile multiple rule files at once
    compiled_rules = yara.load('compiled_rules')
    # Run the rules against the file data (need to test any data conversion made by string IO)
    matches = compiled_rules.match(data=string_data)
    end = perf_counter()
    #logger.info(f"Rules loaded and matches checked in {end - start:.4f} seconds")

    # Return the results
    if matches:
        return "The file is infected with malware", matches
    else:
        return "The file is clean."


def app():
    # Set Streamlit app header
    st.header("Malware Detector")
    # Prompt the user to upload a file
    uploaded_file = st.file_uploader("Choose a file", type=["exe", "dll", "so", "sh", "png"])

    # Check if a file was uploaded
    if uploaded_file is not None:
        # Display the file details
        st.write("File details:")
        file_details = {"File name": uploaded_file.name, "File type": uploaded_file.type, "File size (B)": uploaded_file.size}
        st.write(file_details)
        # Detect malware in the file
        result = detect_malware(uploaded_file, uploaded_file.type)
        
        if isinstance(result, tuple):
            st.warning(result[0])
            try:
                st.table(pd.DataFrame(result[1], columns=['Rules Triggered'], dtype=str))
            except ValueError:
                st.write("")
        else:
            st.info(result)
